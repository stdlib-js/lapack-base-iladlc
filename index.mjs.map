{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/iladlc.js","../lib/main.js","../lib/ndarray.js","../lib/index.js","../ee45a128db9219b0ea7bae9e212205"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as iladlr } from '@stdlib/lapack-base-iladlr';\n\n\n// MAIN //\n\n/**\n* Returns the index of the last non-zero column in a matrix `A`.\n*\n* ## Notes\n*\n* -   If provided an empty matrix or a matrix containing only zeros, the function returns `-1` (i.e., an invalid index).\n*\n* @private\n* @param {PositiveInteger} M - number of rows in `A`\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - index offset for `A`\n* @returns {integer} index of the last non-zero column\n*\n* @example\n* import Float64array from '@stdlib/array-float64';\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 2, 3, A, 3, 1, 0 );\n* // returns 1\n*\n* @example\n* import Float64array from '@stdlib/array-float64';\n*\n* var A = new Float64array( [ 1.0, 3.0, 2.0, 4.0, 0.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 2, 3, A, 1, 2, 0 );\n* // returns 1\n*/\nfunction iladlc( M, N, A, strideA1, strideA2, offsetA ) {\n\treturn iladlr( N, M, A, strideA2, strideA1, offsetA );\n}\n\n\n// EXPORTS //\n\nexport default iladlc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major-string';\nimport isColumnMajor from '@stdlib/ndarray-base-assert-is-column-major-string';\nimport max from '@stdlib/math-base-special-fast-max';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Returns the index of the last non-zero column in a matrix `A`.\n*\n* ## Notes\n*\n* -   If provided an empty matrix or a matrix containing only zeros, the function returns `-1` (i.e., an invalid index).\n*\n* @param {string} order - storage layout\n* @param {PositiveInteger} M - number of rows in `A`\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {RangeError} fifth argument must be greater than or equal to max(1,N)\n* @returns {integer} index of the last non-zero column\n*\n* @example\n* import Float64array from '@stdlib/array-float64';\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 'row-major', 2, 3, A, 3 );\n* // returns 1\n*/\nfunction iladlc( order, M, N, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar s;\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( isRowMajor( order ) ) {\n\t\ts = N;\n\t} else {\n\t\ts = M;\n\t}\n\tif ( LDA < max( 1, s ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be greater than or equal to max(1,%d). Value: `%d`.', s, LDA ) );\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( M, N, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default iladlc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport iladlc from './iladlc.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( iladlc, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default iladlc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Finds the index of the last non-zero column in a matrix `A` using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   If provided an empty matrix or a matrix containing only zeros, the function returns `-1` (i.e., an invalid index).\n*\n* @param {PositiveInteger} M - number of rows in `A`\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - index offset for `A`\n* @returns {integer} index of the last non-zero column\n*\n* @example\n* import Float64array from '@stdlib/array-float64';\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 2, 3, A, 3, 1, 0 );\n* // returns 1\n*/\nfunction iladlc( M, N, A, strideA1, strideA2, offsetA ) {\n\treturn base( M, N, A, strideA1, strideA2, offsetA );\n}\n\n\n// EXPORTS //\n\nexport default iladlc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to find the index of the last non-zero column in an input matrix.\n*\n* @module @stdlib/lapack-base-iladlc\n*\n* @example\n* import Float64array from '@stdlib/array-float64';\n* import iladlc from '@stdlib/lapack-base-iladlc';\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 'row-major', 2, 3, A, 3 );\n* // returns 1\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar iladlc;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tiladlc = main;\n} else {\n\tiladlc = tmp;\n}\n\n\n// EXPORTS //\n\nexport default iladlc;\n","export default '/home/runner/work/lapack-base-iladlc/lapack-base-iladlc/lib'"],"names":["iladlc","M","N","A","strideA1","strideA2","offsetA","iladlr","order","LDA","sa1","sa2","s","isLayout","TypeError","format","isRowMajor","max","RangeError","isColumnMajor","base","setReadOnly","tmp","tryRequire","join","require$$0","iladlc$1","isError","main"],"mappings":";;u2GA2DA,SAASA,EAAQC,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,GAC7C,OAAOC,EAAQL,EAAGD,EAAGE,EAAGE,EAAUD,EAAUE,EAC7C,CCLA,SAASN,EAAQQ,EAAOP,EAAGC,EAAGC,EAAGM,GAChC,IAAIC,EACAC,EACAC,EACJ,IAAMC,EAAUL,GACf,MAAM,IAAIM,UAAWC,EAAQ,uEAAwEP,IAOtG,GAJCI,EADII,EAAYR,GACZN,EAEAD,EAEAQ,EAAMQ,EAAK,EAAGL,GAClB,MAAM,IAAIM,WAAYH,EAAQ,4FAA6FH,EAAGH,IAS/H,OAPKU,EAAeX,IACnBE,EAAM,EACNC,EAAMF,IAENC,EAAMD,EACNE,EAAM,GAEAS,EAAMnB,EAAGC,EAAGC,EAAGO,EAAKC,EAAK,EACjC,CClDAU,EAAArB,EAAA,WCqBA,SAAiBC,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,GAC7C,OAAOc,EAAMnB,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,EAC3C,ICfA,IASIgB,EAAMC,GAAYC,EATXC,EAAkBD,MCrCd,8DD8CwB,gBAUvCE,EATKC,EAASL,GACJM,EAEAN"}