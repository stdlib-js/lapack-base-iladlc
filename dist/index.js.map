{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/iladlc.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar iladlr = require( '@stdlib/lapack-base-iladlr' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Returns the index of the last non-zero column in a matrix `A`.\n*\n* ## Notes\n*\n* -   If provided an empty matrix or a matrix containing only zeros, the function returns `-1` (i.e., an invalid index).\n*\n* @private\n* @param {PositiveInteger} M - number of rows in `A`\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - index offset for `A`\n* @returns {integer} index of the last non-zero column\n*\n* @example\n* var Float64array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 2, 3, A, 3, 1, 0 );\n* // returns 1\n*\n* @example\n* var Float64array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64array( [ 1.0, 3.0, 2.0, 4.0, 0.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 2, 3, A, 1, 2, 0 );\n* // returns 1\n*/\nfunction iladlc( M, N, A, strideA1, strideA2, offsetA ) {\n\treturn iladlr( N, M, A, strideA2, strideA1, offsetA );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iladlc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isLayout = require( '@stdlib/blas-base-assert-is-layout' );\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar isColumnMajor = require( '@stdlib/ndarray-base-assert-is-column-major-string' );\nvar max = require( '@stdlib/math-base-special-fast-max' );\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Returns the index of the last non-zero column in a matrix `A`.\n*\n* ## Notes\n*\n* -   If provided an empty matrix or a matrix containing only zeros, the function returns `-1` (i.e., an invalid index).\n*\n* @param {string} order - storage layout\n* @param {PositiveInteger} M - number of rows in `A`\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @throws {TypeError} first argument must be a valid order\n* @throws {RangeError} fifth argument must be greater than or equal to max(1,N)\n* @returns {integer} index of the last non-zero column\n*\n* @example\n* var Float64array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 'row-major', 2, 3, A, 3 );\n* // returns 1\n*/\nfunction iladlc( order, M, N, A, LDA ) {\n\tvar sa1;\n\tvar sa2;\n\tvar s;\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( isRowMajor( order ) ) {\n\t\ts = N;\n\t} else {\n\t\ts = M;\n\t}\n\tif ( LDA < max( 1, s ) ) {\n\t\tthrow new RangeError( format( 'invalid argument. Fifth argument must be greater than or equal to max(1,%d). Value: `%d`.', s, LDA ) );\n\t}\n\tif ( isColumnMajor( order ) ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t}\n\treturn base( M, N, A, sa1, sa2, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iladlc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Finds the index of the last non-zero column in a matrix `A` using alternative indexing semantics.\n*\n* ## Notes\n*\n* -   If provided an empty matrix or a matrix containing only zeros, the function returns `-1` (i.e., an invalid index).\n*\n* @param {PositiveInteger} M - number of rows in `A`\n* @param {PositiveInteger} N - number of columns in `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - index offset for `A`\n* @returns {integer} index of the last non-zero column\n*\n* @example\n* var Float64array = require( '@stdlib/array-float64' );\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 2, 3, A, 3, 1, 0 );\n* // returns 1\n*/\nfunction iladlc( M, N, A, strideA1, strideA2, offsetA ) {\n\treturn base( M, N, A, strideA1, strideA2, offsetA );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iladlc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar iladlc = require( './iladlc.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( iladlc, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = iladlc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to find the index of the last non-zero column in an input matrix.\n*\n* @module @stdlib/lapack-base-iladlc\n*\n* @example\n* var Float64array = require( '@stdlib/array-float64' );\n* var iladlc = require( '@stdlib/lapack-base-iladlc' );\n*\n* var A = new Float64array( [ 1.0, 2.0, 0.0, 3.0, 4.0, 0.0 ] ); // => [ [ 1.0, 2.0, 0.0 ], [ 3.0, 4.0, 0.0 ] ]\n*\n* var out = iladlc( 'row-major', 2, 3, A, 3 );\n* // returns 1\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar iladlc;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tiladlc = main;\n} else {\n\tiladlc = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = iladlc;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,4BAA6B,EAAE,QAqCrD,SAASC,EAAQC,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,EAAU,CACvD,OAAOP,EAAQG,EAAGD,EAAGE,EAAGE,EAAUD,EAAUE,CAAQ,CACrD,CAKAR,EAAO,QAAUE,IClEjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,oCAAqC,EACzDC,EAAa,QAAS,iDAAkD,EACxEC,EAAgB,QAAS,oDAAqD,EAC9EC,EAAM,QAAS,oCAAqC,EACpDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAO,IA6BX,SAASC,EAAQC,EAAOC,EAAGC,EAAGC,EAAGC,EAAM,CACtC,IAAIC,EACAC,EACA,EACJ,GAAK,CAACb,EAAUO,CAAM,EACrB,MAAM,IAAI,UAAWH,EAAQ,uEAAwEG,CAAM,CAAE,EAO9G,GALKN,EAAYM,CAAM,EACtB,EAAIE,EAEJ,EAAID,EAEAG,EAAMR,EAAK,EAAG,CAAE,EACpB,MAAM,IAAI,WAAYC,EAAQ,4FAA6F,EAAGO,CAAI,CAAE,EAErI,OAAKT,EAAeK,CAAM,GACzBK,EAAM,EACNC,EAAMF,IAENC,EAAMD,EACNE,EAAM,GAEAR,EAAMG,EAAGC,EAAGC,EAAGE,EAAKC,EAAK,CAAE,CACnC,CAKAd,EAAO,QAAUO,ICpFjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,IA4BX,SAASC,EAAQC,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,EAAU,CACvD,OAAOP,EAAME,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,CAAQ,CACnD,CAKAR,EAAO,QAAUE,ICzDjB,IAAAO,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICGjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAASD,EAETC,EAASC,EAMV,OAAO,QAAUD",
  "names": ["require_base", "__commonJSMin", "exports", "module", "iladlr", "iladlc", "M", "N", "A", "strideA1", "strideA2", "offsetA", "require_iladlc", "__commonJSMin", "exports", "module", "isLayout", "isRowMajor", "isColumnMajor", "max", "format", "base", "iladlc", "order", "M", "N", "A", "LDA", "sa1", "sa2", "require_ndarray", "__commonJSMin", "exports", "module", "base", "iladlc", "M", "N", "A", "strideA1", "strideA2", "offsetA", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "iladlc", "ndarray", "join", "tryRequire", "isError", "main", "iladlc", "tmp"]
}
